{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Blacksanta10/Neural-Networks/blob/main/Japanese-to-English\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "whjqGsO8klMl"
      },
      "source": [
        "# ***1. Mount Google drive***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "collapsed": true,
        "id": "uBqEYRqztmpN",
        "outputId": "7217db42-bd2e-44a2-8ac8-a71b99350499"
      },
      "outputs": [
        {
          "ename": "MessageError",
          "evalue": "Error: credential propagation was unsuccessful",
          "output_type": "error",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mMessageError\u001b[0m                              Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-3-d5df0069828e>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mgoogle\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolab\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdrive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/drive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, readonly)\u001b[0m\n\u001b[1;32m     98\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_ms\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m120000\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mreadonly\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m   \u001b[0;34m\"\"\"Mount your Google Drive at the specified mountpoint path.\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 100\u001b[0;31m   return _mount(\n\u001b[0m\u001b[1;32m    101\u001b[0m       \u001b[0mmountpoint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    102\u001b[0m       \u001b[0mforce_remount\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mforce_remount\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36m_mount\u001b[0;34m(mountpoint, force_remount, timeout_ms, ephemeral, readonly)\u001b[0m\n\u001b[1;32m    135\u001b[0m   )\n\u001b[1;32m    136\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mephemeral\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 137\u001b[0;31m     _message.blocking_request(\n\u001b[0m\u001b[1;32m    138\u001b[0m         \u001b[0;34m'request_auth'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    139\u001b[0m         \u001b[0mrequest\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0;34m'authType'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;34m'dfs_ephemeral'\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mblocking_request\u001b[0;34m(request_type, request, timeout_sec, parent)\u001b[0m\n\u001b[1;32m    174\u001b[0m       \u001b[0mrequest_type\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mrequest\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparent\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mparent\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexpect_reply\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    175\u001b[0m   )\n\u001b[0;32m--> 176\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.11/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m    101\u001b[0m     ):\n\u001b[1;32m    102\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;34m'error'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 103\u001b[0;31m         \u001b[0;32mraise\u001b[0m \u001b[0mMessageError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'error'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    104\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mreply\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'data'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    105\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mMessageError\u001b[0m: Error: credential propagation was unsuccessful"
          ]
        }
      ],
      "source": [
        "from google.colab import drive\n",
        "drive.mount('/content/drive') #Also try to mount through colab feature\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mx36QHmXm7Hm"
      },
      "source": [
        "# ***2. Upload my source code***"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 73
        },
        "collapsed": true,
        "id": "2ZDeadZPaHUU",
        "outputId": "47cc3517-d1d3-43e0-f428-c7972f0c03fc"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-bcae9bdb-eeab-4605-8c36-a852f7557ee7\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-bcae9bdb-eeab-4605-8c36-a852f7557ee7\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ],
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Saving Japanese.py to Japanese.py\n"
          ]
        }
      ],
      "source": [
        "from google.colab import files\n",
        "uploaded = files.upload()  # This will prompt you to upload a file"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CgYgkTx_nEW0"
      },
      "source": [
        "# ***3. Run my source code file***\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "background_save": true,
          "base_uri": "https://localhost:8080/"
        },
        "collapsed": true,
        "id": "aMDY50j0cX6h",
        "outputId": "76e5f0aa-6377-4c38-bea2-bc3e3813e904"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "2025-03-23 21:01:52.456962: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
            "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
            "E0000 00:00:1742763712.494431     589 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
            "E0000 00:00:1742763712.506157     589 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n",
            "2025-03-23 21:01:52.539151: I tensorflow/core/platform/cpu_feature_guard.cc:210] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.\n",
            "To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.\n",
            "/content/jpn.txt\n",
            "\n",
            "「彼氏の友達と飲みに行ったら彼に激怒されちゃった」「その『友達』って、男？女？」「男に決まってるでしょ。どうして、彼氏の女友達と飲みに行かなきゃいけないの？」「そりゃそうだ」「彼ねトムって言うんだけど、めっちゃイケてるの。また行きたいな」\n",
            "\"I went drinking with one of my boyfriend's friends, and now he's furious at me.\" \"Was this friend a guy or a girl?\" \"A guy, obviously. Why would I go drinking with his female friends?\" \"Yeah, you're right.\" \"His name is Tom. He's really hot, and I really want to go drinking with him again.\"\n",
            "2025-03-23 21:01:59.725981: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n",
            "tf.Tensor(\n",
            "[b'\\xe7\\xa7\\x81\\xe3\\x81\\x9f\\xe3\\x81\\xa1\\xe3\\x81\\xaf\\xe8\\xaa\\xb0\\xe3\\x82\\x82\\xe3\\x83\\x95\\xe3\\x83\\xa9\\xe3\\x83\\xb3\\xe3\\x82\\xb9\\xe8\\xaa\\x9e\\xe3\\x81\\x8c\\xe8\\xa9\\xb1\\xe3\\x81\\x9b\\xe3\\x81\\xaa\\xe3\\x81\\x84\\xe3\\x80\\x82'\n",
            " b'\\xe3\\x83\\x88\\xe3\\x83\\xa0\\xe3\\x80\\x81\\xe4\\xb8\\x8b\\xe3\\x82\\x8a\\xe3\\x81\\xa6\\xe3\\x82\\x89\\xe3\\x81\\xa3\\xe3\\x81\\x97\\xe3\\x82\\x83\\xe3\\x81\\x84\\xe3\\x80\\x82'\n",
            " b'\\xe3\\x83\\x88\\xe3\\x83\\xa0\\xe3\\x81\\xaf\\xe3\\x82\\xaf\\xe3\\x82\\xb9\\xe3\\x83\\xaa\\xe3\\x82\\x92\\xe3\\x82\\x84\\xe3\\x82\\x8a\\xe3\\x81\\x99\\xe3\\x81\\x8e\\xe3\\x81\\xa6\\xe3\\x80\\x81\\xe6\\xb2\\xbb\\xe7\\x99\\x82\\xe3\\x81\\xa7\\xe5\\x85\\xa5\\xe9\\x99\\xa2\\xe3\\x81\\x97\\xe3\\x81\\xa6\\xe3\\x81\\x84\\xe3\\x82\\x8b\\xe3\\x80\\x82'\n",
            " b'\\xe3\\x82\\xab\\xe3\\x83\\x8a\\xe3\\x83\\x80\\xe3\\x81\\xae\\xe6\\x96\\xb9\\xe3\\x81\\xa7\\xe3\\x81\\x99\\xe3\\x81\\x8b\\xef\\xbc\\x9f'\n",
            " b'\\xe5\\xbd\\xb9\\xe3\\x81\\xab\\xe7\\xab\\x8b\\xe3\\x81\\xa4\\xe3\\x81\\xa8\\xe6\\x80\\x9d\\xe3\\x81\\x86\\xe3\\x82\\x88\\xe3\\x80\\x82'], shape=(5,), dtype=string)\n",
            "\n",
            "tf.Tensor(\n",
            "[b'None of us speak French.' b'Come downstairs, Tom.'\n",
            " b'Tom is in the hospital, recovering from a drug overdose.'\n",
            " b'Are you a Canadian?' b\"I think it'll be useful.\"], shape=(5,), dtype=string)\n",
            "b'\\xe3\\x81\\xaf\\xe3\\x81\\x84'\n",
            "b'\\xe3\\x81\\xaf\\xe3\\x81\\x84'\n",
            "はい\n",
            "tf.Tensor(b'[START]  [END]', shape=(), dtype=string)\n",
            "2025-03-23 21:02:05.364255: I tensorflow/core/framework/local_rendezvous.cc:405] Local rendezvous is aborting with status: OUT_OF_RANGE: End of sequence\n",
            "2025-03-23 21:02:14.783822: I tensorflow/core/framework/local_rendezvous.cc:405] Local rendezvous is aborting with status: OUT_OF_RANGE: End of sequence\n",
            "[2 3 0]\n",
            "\n",
            "[ 2  6 60  6 22  1  4  0  0  0]\n",
            "[ 6 60  6 22  1  4  3  0  0  0]\n",
            "Context tokens, shape (batch, s): (64, 3)\n",
            "Encoder output, shape (batch, s, units): (64, 3, 256)\n",
            "Context sequence, shape (batch, s, units): (64, 3, 256)\n",
            "Target sequence, shape (batch, t, units): (64, 15, 256)\n",
            "Attention result, shape (batch, t, units): (64, 15, 256)\n",
            "Attention weights, shape (batch, t, s):    (64, 15, 3)\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:393: UserWarning: `build()` was called on layer 'decoder', however the layer does not have a `build()` method implemented and it looks like it has unbuilt state. This will cause the layer to be marked as built, despite not being actually built, which may cause failures down the line. Make sure to implement a proper `build()` method.\n",
            "  warnings.warn(\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'cross_attention_1' (of type CrossAttention) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "\n",
            "encoder output shape: (batch, s, units) (64, 3, 256)\n",
            "input target tokens shape: (batch, t) (64, 15)\n",
            "logits shape shape: (batch, target_vocabulary_size) (64, 15, 5000)\n",
            "\n",
            " START TOKENS SHAPES: (64, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (64, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:393: UserWarning: `build()` was called on layer 'decoder_1', however the layer does not have a `build()` method implemented and it looks like it has unbuilt state. This will cause the layer to be marked as built, despite not being actually built, which may cause failures down the line. Make sure to implement a proper `build()` method.\n",
            "  warnings.warn(\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'cross_attention_2' (of type CrossAttention) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'decoder_1' (of type Decoder) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "Context tokens, shape: (batch, s, units) (64, 3)\n",
            "Target tokens, shape: (batch, t) (64, 15)\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "\u001b[1m20/20\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m12s\u001b[0m 430ms/step - loss: 8.5288 - masked_acc: 0.0000e+00 - masked_loss: 8.5288\n",
            "Epoch 1/75\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m77s\u001b[0m 1s/step - loss: 6.2603 - masked_acc: 0.1641 - masked_loss: 6.2603 - val_loss: 4.6483 - val_masked_acc: 0.2868 - val_masked_loss: 4.6483\n",
            "Epoch 2/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 1s/step - loss: 4.4862 - masked_acc: 0.3027 - masked_loss: 4.4862 - val_loss: 4.1813 - val_masked_acc: 0.3193 - val_masked_loss: 4.1813\n",
            "Epoch 3/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 4.1303 - masked_acc: 0.3230 - masked_loss: 4.1303 - val_loss: 3.9504 - val_masked_acc: 0.3362 - val_masked_loss: 3.9504\n",
            "Epoch 4/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.9485 - masked_acc: 0.3362 - masked_loss: 3.9485 - val_loss: 3.8079 - val_masked_acc: 0.3515 - val_masked_loss: 3.8079\n",
            "Epoch 5/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.8269 - masked_acc: 0.3453 - masked_loss: 3.8269 - val_loss: 3.7262 - val_masked_acc: 0.3501 - val_masked_loss: 3.7262\n",
            "Epoch 6/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 1s/step - loss: 3.7323 - masked_acc: 0.3515 - masked_loss: 3.7323 - val_loss: 3.6426 - val_masked_acc: 0.3459 - val_masked_loss: 3.6426\n",
            "Epoch 7/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.6870 - masked_acc: 0.3532 - masked_loss: 3.6870 - val_loss: 3.6131 - val_masked_acc: 0.3596 - val_masked_loss: 3.6131\n",
            "Epoch 8/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m64s\u001b[0m 1s/step - loss: 3.6045 - masked_acc: 0.3579 - masked_loss: 3.6045 - val_loss: 3.5641 - val_masked_acc: 0.3622 - val_masked_loss: 3.5641\n",
            "Epoch 9/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.5075 - masked_acc: 0.3674 - masked_loss: 3.5075 - val_loss: 3.4753 - val_masked_acc: 0.3689 - val_masked_loss: 3.4753\n",
            "Epoch 10/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.5007 - masked_acc: 0.3645 - masked_loss: 3.5007 - val_loss: 3.4636 - val_masked_acc: 0.3737 - val_masked_loss: 3.4636\n",
            "Epoch 11/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m64s\u001b[0m 1s/step - loss: 3.4781 - masked_acc: 0.3698 - masked_loss: 3.4781 - val_loss: 3.4349 - val_masked_acc: 0.3721 - val_masked_loss: 3.4349\n",
            "Epoch 12/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 1s/step - loss: 3.4392 - masked_acc: 0.3747 - masked_loss: 3.4392 - val_loss: 3.4135 - val_masked_acc: 0.3781 - val_masked_loss: 3.4135\n",
            "Epoch 13/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.4209 - masked_acc: 0.3725 - masked_loss: 3.4209 - val_loss: 3.3452 - val_masked_acc: 0.3849 - val_masked_loss: 3.3452\n",
            "Epoch 14/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m80s\u001b[0m 1s/step - loss: 3.3461 - masked_acc: 0.3837 - masked_loss: 3.3461 - val_loss: 3.3255 - val_masked_acc: 0.3837 - val_masked_loss: 3.3255\n",
            "Epoch 15/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.3436 - masked_acc: 0.3784 - masked_loss: 3.3436 - val_loss: 3.3244 - val_masked_acc: 0.3801 - val_masked_loss: 3.3244\n",
            "Epoch 16/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.3211 - masked_acc: 0.3857 - masked_loss: 3.3211 - val_loss: 3.3263 - val_masked_acc: 0.3817 - val_masked_loss: 3.3263\n",
            "Epoch 17/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.3295 - masked_acc: 0.3803 - masked_loss: 3.3295 - val_loss: 3.3148 - val_masked_acc: 0.3835 - val_masked_loss: 3.3148\n",
            "Epoch 18/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m84s\u001b[0m 1s/step - loss: 3.2707 - masked_acc: 0.3889 - masked_loss: 3.2707 - val_loss: 3.2944 - val_masked_acc: 0.3874 - val_masked_loss: 3.2944\n",
            "Epoch 19/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.2792 - masked_acc: 0.3841 - masked_loss: 3.2792 - val_loss: 3.2388 - val_masked_acc: 0.3907 - val_masked_loss: 3.2388\n",
            "Epoch 20/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 1s/step - loss: 3.2627 - masked_acc: 0.3883 - masked_loss: 3.2627 - val_loss: 3.1986 - val_masked_acc: 0.3964 - val_masked_loss: 3.1986\n",
            "Epoch 21/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 1s/step - loss: 3.2276 - masked_acc: 0.3979 - masked_loss: 3.2276 - val_loss: 3.2085 - val_masked_acc: 0.3923 - val_masked_loss: 3.2085\n",
            "Epoch 22/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 1s/step - loss: 3.2242 - masked_acc: 0.3848 - masked_loss: 3.2242 - val_loss: 3.1948 - val_masked_acc: 0.3898 - val_masked_loss: 3.1948\n",
            "Epoch 23/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 1s/step - loss: 3.2167 - masked_acc: 0.3915 - masked_loss: 3.2151 - val_loss: 3.2562 - val_masked_acc: 0.3691 - val_masked_loss: 3.2562\n",
            "Epoch 24/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m65s\u001b[0m 1s/step - loss: 3.0629 - masked_acc: 0.4024 - masked_loss: 3.0629 - val_loss: 3.1446 - val_masked_acc: 0.3967 - val_masked_loss: 3.1446\n",
            "Epoch 25/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.0273 - masked_acc: 0.4035 - masked_loss: 3.0273 - val_loss: 3.1595 - val_masked_acc: 0.3974 - val_masked_loss: 3.1595\n",
            "Epoch 26/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m61s\u001b[0m 1s/step - loss: 3.0089 - masked_acc: 0.4073 - masked_loss: 3.0089 - val_loss: 3.1518 - val_masked_acc: 0.4005 - val_masked_loss: 3.1518\n",
            "Epoch 27/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9772 - masked_acc: 0.4074 - masked_loss: 2.9772 - val_loss: 3.1267 - val_masked_acc: 0.3976 - val_masked_loss: 3.1267\n",
            "Epoch 28/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.0098 - masked_acc: 0.4049 - masked_loss: 3.0098 - val_loss: 3.1114 - val_masked_acc: 0.4024 - val_masked_loss: 3.1114\n",
            "Epoch 29/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.0020 - masked_acc: 0.4092 - masked_loss: 3.0020 - val_loss: 3.1151 - val_masked_acc: 0.4020 - val_masked_loss: 3.1151\n",
            "Epoch 30/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 3.0124 - masked_acc: 0.4070 - masked_loss: 3.0124 - val_loss: 3.1275 - val_masked_acc: 0.4012 - val_masked_loss: 3.1275\n",
            "Epoch 31/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 1s/step - loss: 3.0128 - masked_acc: 0.4061 - masked_loss: 3.0128 - val_loss: 3.0900 - val_masked_acc: 0.4036 - val_masked_loss: 3.0900\n",
            "Epoch 32/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9709 - masked_acc: 0.4107 - masked_loss: 2.9709 - val_loss: 3.1280 - val_masked_acc: 0.3965 - val_masked_loss: 3.1280\n",
            "Epoch 33/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9799 - masked_acc: 0.4138 - masked_loss: 2.9799 - val_loss: 3.0596 - val_masked_acc: 0.4094 - val_masked_loss: 3.0596\n",
            "Epoch 34/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9631 - masked_acc: 0.4156 - masked_loss: 2.9631 - val_loss: 3.0830 - val_masked_acc: 0.4012 - val_masked_loss: 3.0830\n",
            "Epoch 35/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9706 - masked_acc: 0.4139 - masked_loss: 2.9706 - val_loss: 3.0406 - val_masked_acc: 0.4083 - val_masked_loss: 3.0406\n",
            "Epoch 36/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9548 - masked_acc: 0.4133 - masked_loss: 2.9548 - val_loss: 3.0344 - val_masked_acc: 0.4103 - val_masked_loss: 3.0344\n",
            "Epoch 37/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m60s\u001b[0m 1s/step - loss: 2.9618 - masked_acc: 0.4116 - masked_loss: 2.9618 - val_loss: 3.0607 - val_masked_acc: 0.4060 - val_masked_loss: 3.0607\n",
            "Epoch 38/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9212 - masked_acc: 0.4175 - masked_loss: 2.9212 - val_loss: 3.0291 - val_masked_acc: 0.4117 - val_masked_loss: 3.0291\n",
            "Epoch 39/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 1s/step - loss: 2.9508 - masked_acc: 0.4117 - masked_loss: 2.9508 - val_loss: 3.0388 - val_masked_acc: 0.4084 - val_masked_loss: 3.0388\n",
            "Epoch 40/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m57s\u001b[0m 961ms/step - loss: 2.9363 - masked_acc: 0.4172 - masked_loss: 2.9363 - val_loss: 3.0139 - val_masked_acc: 0.4128 - val_masked_loss: 3.0139\n",
            "Epoch 41/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9429 - masked_acc: 0.4124 - masked_loss: 2.9429 - val_loss: 3.0360 - val_masked_acc: 0.4086 - val_masked_loss: 3.0360\n",
            "Epoch 42/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 1s/step - loss: 2.9483 - masked_acc: 0.4171 - masked_loss: 2.9483 - val_loss: 2.9701 - val_masked_acc: 0.4187 - val_masked_loss: 2.9701\n",
            "Epoch 43/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m81s\u001b[0m 1s/step - loss: 2.9112 - masked_acc: 0.4195 - masked_loss: 2.9112 - val_loss: 3.0053 - val_masked_acc: 0.4127 - val_masked_loss: 3.0053\n",
            "Epoch 44/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m82s\u001b[0m 1s/step - loss: 2.9449 - masked_acc: 0.4137 - masked_loss: 2.9449 - val_loss: 3.0007 - val_masked_acc: 0.4123 - val_masked_loss: 3.0007\n",
            "Epoch 45/75\n",
            "\u001b[1m60/60\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m83s\u001b[0m 1s/step - loss: 2.8901 - masked_acc: 0.4227 - masked_loss: 2.8901 - val_loss: 3.0120 - val_masked_acc: 0.4135 - val_masked_loss: 3.0120\n",
            "\n",
            " START TOKENS SHAPES: (1, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (1, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "\n",
            " START TOKENS SHAPES: (1, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (1, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'cross_attention_2' (of type CrossAttention) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'decoder_1' (of type Decoder) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "\n",
            "Execution time for first sentence: 0.46932148933410645 seconds\n",
            "\n",
            " START TOKENS SHAPES: (1, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (1, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'cross_attention_2' (of type CrossAttention) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'decoder_1' (of type Decoder) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "Execution time for 2nd sentence: 0.47746920585632324 seconds\n",
            "Expected output:\n",
            " \"I went drinking with one of my boyfriend's friends, and now he's\n",
            "furious at me.\" \"Was this friend a guy or a girl?\" \"A guy, obviously.\n",
            "Why would I go drinking with his female friends?\" \"Yeah, you're\n",
            "right.\" \"His name is Tom. He's really hot, and I really want to go\n",
            "drinking with him again.\"\n",
            "\n",
            " START TOKENS SHAPES: (1, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (1, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'cross_attention_2' (of type CrossAttention) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'decoder_1' (of type Decoder) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "\n",
            " START TOKENS SHAPES: (1, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (1, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'cross_attention_2' (of type CrossAttention) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'decoder_1' (of type Decoder) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "i dont want to go to the party . \n",
            "\n",
            " START TOKENS SHAPES: (1, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (1, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "i dont want to go to the party . \n",
            "\n",
            " START TOKENS SHAPES: (1, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (1, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "what are you going or or by bus ? \n",
            "\n",
            "\n",
            " START TOKENS SHAPES: (3, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (3, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "i dont want to go to the party . \n",
            "i dont want to go to the party . \n",
            "what are you going or or by bus ? \n",
            "\n",
            "\n",
            " START TOKENS SHAPES: (None, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (None, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "W0000 00:00:1742767351.240515     589 op_level_cost_estimator.cc:699] Error in PredictCost() for the op: op: \"Softmax\" attr { key: \"T\" value { type: DT_FLOAT } } inputs { dtype: DT_FLOAT shape { unknown_rank: true } } device { type: \"CPU\" vendor: \"GenuineIntel\" model: \"111\" frequency: 2199 num_cores: 2 environment { key: \"cpu_instruction_set\" value: \"AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2\" } environment { key: \"eigen\" value: \"3.4.90\" } l1_cache_size: 32768 l2_cache_size: 262144 l3_cache_size: 57671680 memory_size: 268435456 } outputs { dtype: DT_FLOAT shape { unknown_rank: true } }\n",
            "i dont want to go to the party .                                         \n",
            "i dont want to go to the party .                                         \n",
            "what are you going or or by bus ?                                         \n",
            "\n",
            " START TOKENS SHAPES: (None, 1)\n",
            "\n",
            "EMBEDDED START TOKENS SHAPE: (None, 1, 256)\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "TESTINGGGGG: 2\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'cross_attention_2' (of type CrossAttention) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/layer.py:938: UserWarning: Layer 'decoder_1' (of type Decoder) was passed an input with a mask attached to it. However, this layer does not support masking and will therefore destroy the mask information. Downstream layers will not see the mask.\n",
            "  warnings.warn(\n",
            "W0000 00:00:1742767384.227377     589 op_level_cost_estimator.cc:699] Error in PredictCost() for the op: op: \"Softmax\" attr { key: \"T\" value { type: DT_FLOAT } } inputs { dtype: DT_FLOAT shape { unknown_rank: true } } device { type: \"CPU\" vendor: \"GenuineIntel\" model: \"111\" frequency: 2199 num_cores: 2 environment { key: \"cpu_instruction_set\" value: \"AVX SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2\" } environment { key: \"eigen\" value: \"3.4.90\" } l1_cache_size: 32768 l2_cache_size: 262144 l3_cache_size: 57671680 memory_size: 268435456 } outputs { dtype: DT_FLOAT shape { unknown_rank: true } }\n",
            "i dont want to go to the party .                                         \n",
            "i dont want to go to the party .                                         \n",
            "what are you going or or by bus ?                                         \n"
          ]
        }
      ],
      "source": [
        "!python3 Japanese.py  # Replace \"your_file.py\" with the actual filename\n"
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1z7OfpuiFhTiSL3KcWBG2S7zTQbbwjgpm",
      "authorship_tag": "ABX9TyNRF2YNkBjOkHnaKeRbwJsd",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}